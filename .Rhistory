swanxml[1
]
class(swanxml)
swanxml$XMLAbstractDocument
swanxml["XMLAbstractDocument"]
swanxml["XMLAbstractDocument"][1]
swanxml["XMLInternalDocument"]
swanxml["XMLInternalDocument"][1]
swanxml["XMLInternalDocument"][[1]]
swanxml["XMLInternalDocument"]
swanxml["XMLInternalDocument"]["XMLNodeSet"]
swanxml
swanxml$item
xmlRoot(swanXML)
xmlRoot(swanxml)
swan <- xmlRoot(swanxml)
swan
class(swan)
rm(list = ls())
swirl()
require(swirl)
swirl()
bye()
swirl()
ls()
rm(list = ls())
library(swirl)
swirl
swirl()
ls()
library(swirl); swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0,1,len=6)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
p1(seq(0,1,len=6))
p1(seq(0,6,len=6))
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), aplha = .5)
p3 <- colorRampPalette(c("blue", "green"), aplha = ".5")
p3 <- colorRampPalette(c("blue", "green"), alpha = ".5")
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5, .3))
col <- brewer.pal(3, "BuGn")
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
rm(list = ls())
library(swirl); swirl()
qplot(drv, hwy, mpg, geom = "boxplt")
qplot(drv, hwy, mpg, geom = "boxplot")
qplot(drv, hwy, data =mpg, geom = "boxplot")
qplot(drv, hwy, data =mpg, geom = "boxplot", color = "manufacturer")
qplot(drv, hwy, data =mpg, geom = "boxplot", color =manufacturer)
qplot(hwy, data =mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets  = ". ~ drv")
qplot(displ, hwy, data = mpg, facets  = . ~ drv)
qplot(hwy, data = mpg, facets  = drv ~ ., binwidth = 2)
library(swirl); swirl
library(swirl); swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, facets  = . ~ drv)
dev.off()
qplot(displ, hwy, data = mpg, facets  = . ~ drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)_+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size = 4, alpha = 1/2)+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv, size = 2, alpha = 1/2))+geom_smooth(size = 4,linetype = 3,method = lm, se = FALSE)
g+geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4,linetype = 3,method = lm, se = FALSE)
g+geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4,linetype = 3,method = "lm", se = FALSE)
g+geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "1", ylim=c(-3,3))
plot(myx, myy, type = "l", ylim=c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(mpg, aes(x = displ, y = hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black" )
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black" )+labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
bye()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
?nlme
View(testdat)
?datasets
library(help = 'datasets')
r <- dataset(rock)
r <- data(rock)
r
data(rock)
?data
data
data()
?rock
View(rock)
xyplot(perm ~ shape | area, peri)
with(rock, xyplot(perm ~ shape | area, peri))
xyplot(rock$perm ~ rock$shape | rock$area, $peri)
xyplot(perm ~ shape | area, peri, data = rock)
xyplot(perm ~ shape | peri, data = rock)
xyplot(peri ~ shape | perm, data = rock)
?lpoints
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
xyplot(Ozone ~ Wind | Month, data = airquality)
p <- xyplot(Ozone ~ Wind | Month, data = airquality)
p
?par
?splom
?trellis.par.set
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot
library(ggplot2)
qplot
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth", model = "l")
qplot(Wind, Ozone, data = airquality, geom = "smooth", model = l)
qplot(Wind, Ozone, data = airquality, geom = "smooth", method = "l")
qplot(Wind, Ozone, data = airquality, geom = ("smooth", model = "l")
qplot(Wind, Ozone, data = airquality, geom = ("smooth", model = "l"))
qplot(Wind, Ozone, data = airquality, geom = "smooth", model = "l"))
qplot(Wind, Ozone, data = airquality, geom = "smooth", model = "l")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
class(airquality$Month)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airqiality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
qplot(Wind, Ozone, data = airquality, facets = .~Month, na.rm = TRYE)
qplot(Wind, Ozone, data = airquality, facets = .~Month, na.rm = TRUE)
?geom
??geom
data(movies)
head(movies)
str(movies)
?panel.loess
?geom_smooth
swirl()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(x = ssd, ssd$subject == 1)
sub1 <- subset(x = ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
dist(x[,1:3])
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(cbind(sub1[,10:12], maxCon))
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size == 29
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[1][wool])
names(pm0) <- make.names(cnames[1][1:5])
names(pm0) <- make.names(cnames[1][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0["Sample.Value"]
x0 <- pm0$Sample.Value
str(x0)
with(is.na(x0), mean)
mean(is.na(x0))
pm1 <- make.names(cnames[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
ls
ls()
head(my2012)
x1 <- pm1$Sample.Value
pm1 <- pm0
x1 <- pm1$Sample.Value
mean(is.ma(x1))
mean(is.na(x1))
summary(x0)
summary(x1)
bye()
bye()
swirl()
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
x1 <- pm1$Sample.Value
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
bye()
swirl()
dim(pm0)
head(pm0)
names(pm0)
cna,es
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, ((State.Code == 26)&(county.site %in% both)))
cnt0 <- subset(pm0, ((State.Code == 36)&(county.site %in% both)))
cnt0 <- subset(pm0, (State.Code == 36)&(county.site %in% both))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0aub$Sample.Value
x0sub <- pm0sub$Sample.Value
x10sub <- pm1sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE))
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, FUN = mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, FUN = mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,3]))
with(mrg, plot(rep(2,52), mrg[,3]))
with(mrg, plot(rep(1,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
with(mrg, plot(rep(1,52), mrg[,2]))
with(mrg, points(rep(2,52), mrg[,3]))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
?
a
?swirl
swirl
?InstallCourses
install.packages("kernlab")
library(kernlab)
ver
version
update
library(kernlab)
data(spam)
str(spam)
str(spam[1:5,])
str(spam[,1:5])
names(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSaom)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ log10(trainSpam$type))
plot(log(trainSpam$capitalAve) ~ log(trainSpam$type))
plot(log(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] +1)
)
hclust <- hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
plot(hclust)
rm(hclust)
hCluster <- hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:57] + 1)))
)
plot(hClusterUpdated)
?mutate
library(plyr)
?mutate
?transform
ls
;s()
ls()
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity[["date"]] <- as.Date(activity[["date"]], "%Y-%m-%d")
str(activity)
activity <- read.csv(unz("activity.zip", "activity.csv"))
setwd("~/R/RepData_PeerAssessment1")
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity[["date"]] <- as.Date(activity[["date"]], "%Y-%m-%d")
str(activity)
activity2 <- activity[complete.cases(activity),] # ignoring NA observations for this part of the assignment
daily_steps <- tapply(X = activity2$steps,INDEX = activity2$date, FUN = "sum")
mean(daily_steps)
mean_daily_steps <- mean(daily_steps)
median_daily_steps <- median(daily_steps)
interval_steps <- tapply(X = activity2$steps, INDEX = activity2$interval, FUN = "mean")
max_mean_steps <- as.data.frame(interval_steps[interval_steps == max(interval_steps)])
max_mean_x = row.names(max_mean_steps)
max_mean_y = max_mean_steps[[1]]
activity_sub <- activity #clone the dataset for replacing NAs
for(i in 1:nrow(activity_sub)) {
if(is.na(activity_sub[i,1])) {
interval_i <- as.character(activity_sub[i,3]) #get the interval
mean_step_i <- interval_steps[interval_i] #get mean steps for interval
activity_sub[i,1] <- round(as.numeric(mean_step_i)) #replace NA value
}
}
daily_steps_sub <- tapply(X = activity2$steps,INDEX = activity2$date, FUN = "sum")
hist(daily_steps_sub, xlab = "Total Daily Steps", col = "blue")
mean_daily_steps_sub <- mean(daily_steps_sub)
median_daily_steps_sub <- median(daily_steps_sub)
cat("New mean: ", mean_daily_steps_sub, " Previous mean: ", mean_daily_steps, "\n" )
cat("New median: ", median_daily_steps_sub, " Previous mean: ", median_daily_steps, "\n")
require(dplyr, ggplot2)
require(ggplot2)
require(c(dplyr, ggplot2))
require(dplyr); require(ggplot2)
require(ggplot2);require(dplyr)
?mutate
activity_mu <- activity_sub
activity_mu[1:3,3]
activity_mu[1:3,2]
weekday(activity_mu[1:3,2])
weekdays(activity_mu[1:3,2])
weekdays(activity_mu[1:3,2]) == c("Saturday", "Sunday")
weekdays(activity_mu[1:3,2]) == "Saturday" OR "Sunday"
weekdays(activity_mu[1:3,2]) == ("Saturday" OR "Sunday")
weekdays(activity_mu[1:3,2]) == "Saturday"
weekdays(activity_mu[1:3,2]) == "Saturday" OR weekdays(activity_mu[1:3,2]) == "Sunday"
(weekdays(activity_mu[1:3,2]) == "Saturday") OR (weekdays(activity_mu[1:3,2]) == "Sunday")
(weekdays(activity_mu[1:3,2]) == "Saturday") | (weekdays(activity_mu[1:3,2]) == "Sunday")
weekdays(activity_mu[1:3,2]) == ("Saturday" | "Sunday")
mutate(activity_mu, weekday = NULL)
activity_mu <- mutate(activity_mu, weekday = NULL)
str(activity_mu)
activity_mu2 <- mutate(activity_mu, weekday = NULL)
View(activity_mu2)
activity_mu2 <- mutate(activity_mu2, weekday = NA)
View(activity_mu2)
rm(activity_mu2)
mutate(activity_mu, weekday = NA)
activity_sub <- mutate(activity_sub, weekday = NA)
head(activity_sub)
weekday_i <- (weekdays(activity_mu[1,2]) == "Saturday") | (weekdays(activity_mu[1,2]) == "Sunday")
weekday_i
for(i in 1:nrow(activity_sub)){
weekday_i <- (weekdays(activity_mu[i,2]) == "Saturday") | (weekdays(activity_mu[i,2]) == "Sunday")
activity_sub[i,4] = weekday_i
}
View(activity_sub)
table(activity_sub$weekday)
for(i in 1:nrow(activity_sub)){
weekday_i <- !(weekdays(activity_mu[i,2]) == "Saturday") | (weekdays(activity_mu[i,2]) == "Sunday")
activity_sub[i,4] = weekday_i
}
table(activity_sub$weekday)
class(activity_sub$weekday)
?ggplot
g <- ggplot(activity_sub, aes(x = interval, y = steps))
g
?g
g()
g() + geom_line()
g + geom_line()
g + geom_freqpoly()
g + geom_line()
g + geom_line()+facet_grid()
g + geom_line()+facet_grid(facets = weekday)
g + geom_line()+facet_grid(facets = activity_sub$weekday)
qplot(data = activity_sub, x = interval,y = steps)
qplot(data = activity_sub, x = interval,y = steps, facets = weekday)
qplot(data = activity_sub, x = interval,y = steps, facets = "weekday")
qplot(data = activity_sub, x = interval,y = steps, facets = activity_sub$weekday)
qplot(data = activity_sub, x = interval,y = steps, color = activity_sub$weekday)
qplot(data = activity_sub, x = interval,y = steps, color = activity_sub$weekday, geom = line)
qplot(data = activity_sub, x = interval,y = steps, color = weekday)
qplot(data = activity_sub, x = interval,y = steps, facets = ~ . weekday)
qplot(data = activity_sub, x = interval,y = steps, facets = ~.weekday)
qplot(data = activity_sub, x = interval,y = steps, facets = ~. activity_sub$weekday)
qplot(data = activity_sub, y = steps, facets = ~.weekday)
qplot(data = activity_sub, y = steps, facets = interval.weekday)
qplot(data = activity_sub, x = interval,y = steps,geom = smooth)
qplot(data = activity_sub, x = interval,y = steps,geom = "smooth")
qplot(data = activity_sub, x = interval,y = steps,geom = c("line",smooth"))
)
qplot(data = activity_sub, x = interval,y = steps, geom = c("line",smooth"))
qplot(data = activity_sub, x = interval,y = steps, geom = c("line","smooth"))
qplot(data = activity_sub, x = interval,y = steps,geom = "smooth", facet_grid = weekday)
qplot(data = activity_sub, x = interval,y = steps,geom = "smooth", facet_grid = activity_sub$weekday)
qplot(data = activity_sub, x = interval,y = steps,geom = "smooth", facets = activity_sub$weekday)
qplot(data = activity_sub, x = interval,y = steps,geom = "smooth", facets = ~.activity_sub$weekday)
library(lattice)
xyplot(interval ~ steps | weekday, data = activity_sub, layout = c(1,2))
xyplot(steps ~ interval | weekday, data = activity_sub, layout = c(1,2))
xyplot(steps ~ interval | weekday, data = activity_sub, layout = c(1,2), type = "line")
xyplot(steps ~ interval | weekday, data = activity_sub, layout = c(1,2), type = "l")
xyplot(log(steps) ~ interval | weekday, data = activity_sub, layout = c(1,2), type = "l")
xyplot(log(steps) ~ interval | weekday, data = activity_sub, layout = c(1,2), type = "l")
?lattice
xyplot(steps ~ interval | weekday, data = activity_sub, layout = c(1,2), type = "l", xlab = "Interval", ylab = "Steps")
activity_sub <- mutate(activity_sub, day_type = "Weekday")
for(i in 1:nrow(activity_sub)){
weekend_i <- (weekdays(activity_sub[i,2]) == "Saturday") | (weekdays(activity_sub[i,2]) == "Sunday")
if(weekend_i) {activity_sub[i,4] = "Weekend"}
}
table(activity_sub$day_type)
View(activity_sub)
